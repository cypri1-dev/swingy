@startuml
title Architecture MVC - Jeu RPG

' =======================
'   COUCHES DU SYSTÈME
' =======================

package "Model" #LightBlue {
  class Characters {
    -String type
    -String name
    -String characterClass
    -int level
    -int xp
    -int attack
    -int defense
    -int hitPoint
    -List<Artefact> bag
    -Coordinates coord
    #Characters(String type, String name, String class, Artefact bag)
    #void setName(String name)
    #void setClass(String characterClass)
    #void setClass(String class)
    #void setLevel(int level)
    #void setAttack(int attack)
    #void setDefense(int defense)
    +void addArtefact(Artefact item)
    +void removeArtefact(Artefact item)
    +String getName()
    +String getClass()
    +int getLevel()
    +int getAttack()
    +int getDefense()
    +int getHitPoint()
    +List<Artefact> getArtefacts()
  }

  class Hero {
    -GameMovement movement
    +Hero(String type, String name, String class)
  }

  class Enemy {
    +Enemy(String type, String name, String class, Artefact bag)
  }

  class Artefact {
    -String type
    -String name
    -int bonus
    -bool isEquipped
    #Artefact(String type, String name, int bonus)
    #void setType(String type)
    #void setName(String name)
    #void setBonus(int bonus)
    #void setIsEquipped(bool equipped)
    public String getType()
    public String getName()
    public int getBonus()
    public bool getIsEquipped()
  }

  class Weapon {
    +Weapon(String type, String name, int bonus)
  }

  class Armor {
    +Armor(String type, String name, int bonus)
  }

  class Helm {
    +Helm(String type, String name, int bonus)
  }

  class Coordinates {
    -int x
    -int y
    -int prevX
    -int prevY
    ~Coordinates(int x, int y)
    +void setX()
    +void setY()
    +void setPrevX()
    +void setPrevY()
    +int getX()
    +int getY()
  }

  class Map {
    -int size
    -int[][] map
    -List<Characters*> enemiesList
    -Characters mainHero
    #Map(int size, int[][] map)
    +Characters getEnemies()
    +setSize(int size)
    +int getSize()
    +void displayMap()
    +void updateMap()
  }

  class GameLogic {
    +fight(Characters hero, Characters enemy)
    +run(Coordinates coor)
    +Artefact* createLoot()
    +bool checkLevelComplete(Coordinates coor)
  }

  class CharactersFactory <<Singleton>> {
    -static CharactersFactory instance
    -CharactersFactory()
    +static CharactersFactory getInstance()
    +Characters* newCharacters(String type, String name, String characterClass)
  }

  class ArtefactFactory <<Singleton>> {
    -static ArtefactFactory instance
    -ArtefactFactory()
    +static ArtefactFactory getInstance()
    +Artefact* newArtefact(String type, String name, int bonus)
  }

  class MapFactory <<Singleton>> {
    -static MapFactory instance
    -MapFactory()
    +static MapFactory getInstance()
    +Map* newMap(int size, int[][] map)
  }
}

package "Controller" #LightGreen {
  class Game {
    -List<Characters> availableHeros
    -Menu Menu
    -Map actualMap
    +launchGame()
  }

  class Menu {
    +displayAvailableHeros()
    +addHero()
    +removeHero()
    +loadCharacter()
    +loadSave()
    +save()
  }

  class GameMovement {
    +void moveNorth(Hero hero)
    +void moveEast(Hero hero)
    +void moveSouth(Hero hero)
    +void moveWest(Hero hero)
  }
}

package "View" #LightYellow {
  class MapDisplay {
    +displayMap(Map map)
  }

  class MenuDisplay {
    +showMenu()
    +showHeroList()
  }
}

' =======================
'   RELATIONS
' =======================

' --- Modèle interne ---
Characters <|-- Hero
Characters <|-- Enemy
Artefact <|-- Armor
Artefact <|-- Weapon
Artefact <|-- Helm
Characters *-- Artefact
Characters *-- Coordinates
CharactersFactory ..> Hero : creates
CharactersFactory ..> Enemy : creates
ArtefactFactory ..> Artefact : creates
MapFactory ..> Map : creates
Map *-- Characters
Hero --> GameMovement : uses

' --- Vue <-> Contrôleur ---
MenuDisplay --> Menu : affiche options
MapDisplay --> Game : rafraîchit carte

' --- Vue <-> Modèle (lecture seule) ---
MapDisplay ..> Map : lit état
MenuDisplay ..> Characters : affiche infos

' --- Contrôleur <-> Modèle ---
Game --> GameLogic : utilise
Game --> Map : gère
Game --> Characters : contrôle
Game --> GameMovement : déplace héros
Menu --> Game : interagit
Menu --> Characters : sélectionne

@enduml
